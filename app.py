
import streamlit as st
import requests
import openai

# ----------------- Secure API Key Handling --------------------
openai.api_key = st.secrets["OPENAI_API_KEY"]
API_KEY = st.secrets["GOOGLE_API_KEY"]
WEATHER_API_KEY = st.secrets["WEATHER_API_KEY"]

# ----------------- Helper Functions --------------------
def get_location_details_from_google(pincode):
    geocode_url = f"https://maps.googleapis.com/maps/api/geocode/json?address={pincode}&key={API_KEY}"
    response = requests.get(geocode_url).json()
    if response["status"] == "OK":
        components = response["results"][0]["address_components"]
        district, village = None, None
        for comp in components:
            if "administrative_area_level_2" in comp["types"]:
                district = comp["long_name"]
            if "sublocality_level_1" in comp["types"] or "locality" in comp["types"]:
                village = comp["long_name"]
        return village or "Unknown", district or "Unknown"
    return "‚ùå Not Found", "‚ùå Not Found"

def get_satellite_image(pincode):
    geocode_url = f"https://maps.googleapis.com/maps/api/geocode/json?address={pincode}&key={API_KEY}"
    geocode_response = requests.get(geocode_url).json()
    if geocode_response["status"] == "OK":
        location = geocode_response["results"][0]["geometry"]["location"]
        lat, lng = location["lat"], location["lng"]
        static_map_url = f"https://maps.googleapis.com/maps/api/staticmap?center={lat},{lng}&zoom=13&size=600x300&maptype=satellite&key={API_KEY}"
        return static_map_url, geocode_response["results"][0]["formatted_address"]
    return None, None

def validate_farmer_crop(pincode, district, crop):
    prompt = f"""
    A farmer in {district} (pincode {pincode}) wants to grow {crop}. 
    Based on typical soil, season, and weather in this area, analyze if this is a good decision.
    If it's a good crop choice, say so clearly and provide:
    - Reasons it's suitable
    - Expected yield/profit
    - Timeline & what inputs (seeds, fertilizers) are needed
    - Suggest links for buying inputs (BigHaat, Amazon, etc.)
    - Recommend crop insurance: both government (like PMFBY) and private (IFFCO, HDFC Ergo)

    If it's NOT a good choice, explain why and suggest 2-3 better crops instead based on soil/weather/season.
    Respond in Hinglish with clear formatting and practical advice.
    """
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ùå GPT issue: {str(e)}"

def chat_with_gpt(prompt):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ùå GPT issue: {str(e)}"

# ----------------- App UI --------------------
st.set_page_config(page_title="Yugdaan ‚Äì FarmGPT", layout="centered")
st.title("üåæ Yugdaan ‚Äì FarmGPT: Smart Crop Validator")

st.markdown("### üìç Step 1: ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§™‡§ø‡§®‡§ï‡•ã‡§° ‡§î‡§∞ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§≠‡§∞‡•á‡§Ç")

pincode = st.text_input("‡§™‡§ø‡§®‡§ï‡•ã‡§° ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç (Enter Pincode)")
land_size = st.selectbox("‡§ï‡§ø‡§§‡§®‡•Ä ‡§ú‡§º‡§Æ‡•Ä‡§® ‡§Æ‡•á‡§Ç ‡§ñ‡•á‡§§‡•Ä ‡§ï‡§∞‡§®‡§æ ‡§π‡•à? (Land Size)", ["<1 acre", "1‚Äì2 acre", "2‚Äì5 acre", "5+ acre"])
budget = st.selectbox("‡§Ü‡§™‡§ï‡§æ ‡§¨‡§ú‡§ü ‡§ï‡§ø‡§§‡§®‡§æ ‡§π‡•à? (Budget)", ["<‚Çπ10,000", "‚Çπ10,000‚Äì30,000", "‚Çπ30,000‚Äì50,000", "‚Çπ50,000+"])

if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

if pincode:
    village, district = get_location_details_from_google(pincode)
    if district == "‚ùå Not Found":
        st.warning("‚ö†Ô∏è ‡§Ø‡§π ‡§™‡§ø‡§®‡§ï‡•ã‡§° ‡§π‡§Æ‡§æ‡§∞‡•á ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§Æ‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç‡•§")
    else:
        st.success(f"üìç ‡§ú‡§ø‡§≤‡§æ: {district}, ‡§ó‡§æ‡§Å‡§µ: {village}")
        img_url, address = get_satellite_image(pincode)
        if img_url:
            st.image(img_url, caption=f"üåç {address}", use_container_width=True)

        # Weather section placeholder
        st.markdown("### ‚òÅÔ∏è ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä (coming soon...)")

        # Crop choice
        st.markdown("### üå± Step 2: ‡§ï‡§ø‡§∏‡§æ‡§® ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§ö‡•Å‡§®‡•Ä ‡§ó‡§à ‡§´‡§∏‡§≤ ‡§ï‡§æ ‡§ö‡§Ø‡§® ‡§ï‡§∞‡•á‡§Ç")
        farmer_crop = st.selectbox("‡§Ü‡§™ ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§´‡§∏‡§≤ ‡§â‡§ó‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?", [
            "‡§ó‡•á‡§π‡•Ç‡§Ç (Wheat)", "‡§ß‡§æ‡§® (Paddy)", "‡§Æ‡•Ç‡§≤‡•Ä (Radish)", "‡§ü‡§Æ‡§æ‡§ü‡§∞ (Tomato)",
            "‡§ß‡§®‡§ø‡§Ø‡§æ (Coriander)", "‡§Æ‡§ï‡•ç‡§ï‡§æ (Maize)", "‡§ó‡§®‡•ç‡§®‡§æ (Sugarcane)", 
            "‡§¨‡•à‡§Ç‡§ó‡§® (Brinjal)", "‡§∏‡§∞‡§∏‡•ã‡§Ç (Mustard)", "‡§ö‡§®‡§æ (Chickpea)"
        ])

        if st.button("‚úÖ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç (Validate Crop Choice)"):
            with st.spinner("AI ‡§∏‡•á ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§≤‡§ø‡§è ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç..."):
                crop_advice = validate_farmer_crop(pincode, district, farmer_crop)
                st.session_state.chat_history.append(("üß† FarmGPT", crop_advice))
                st.markdown(crop_advice)

        # Chat follow-up
        st.markdown("### ü§ù ‡§î‡§∞ ‡§ï‡•Å‡§õ ‡§™‡•Ç‡§õ‡§®‡§æ ‡§π‡•à? (Ask more...)")
        followup = st.text_input("‡§ú‡•à‡§∏‡•á ‡§™‡•Ç‡§õ‡•á‡§Ç: '‡§¨‡•Ä‡§ú ‡§ï‡§π‡§æ‡§Ç ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ?' ‡§Ø‡§æ '‡§ï‡§ø‡§§‡§®‡•Ä ‡§¨‡§æ‡§∞ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à?'")
        if followup:
            with st.spinner("AI ‡§∏‡•á ‡§ú‡§µ‡§æ‡§¨ ‡§Ü ‡§∞‡§π‡§æ ‡§π‡•à..."):
                chat_prompt = f"‡§è‡§ï ‡§ï‡§ø‡§∏‡§æ‡§® ‡§™‡•Ç‡§õ ‡§∞‡§π‡§æ ‡§π‡•à: '{followup}'. ‡§∏‡§∞‡§≤ ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§á‡§è, Hinglish ‡§Æ‡•á‡§Ç, ‡§≠‡§∞‡•ã‡§∏‡•á‡§Æ‡§Ç‡§¶ ‡§Ö‡§Ç‡§¶‡§æ‡§ú‡§º ‡§Æ‡•á‡§Ç‡•§"
                chat_reply = chat_with_gpt(chat_prompt)
                st.session_state.chat_history.append(("üë®‚Äçüåæ ‡§ï‡§ø‡§∏‡§æ‡§®", followup))
                st.session_state.chat_history.append(("üß† FarmGPT", chat_reply))

        # Display chat history
        for role, msg in st.session_state.chat_history:
            if role == "üë®‚Äçüåæ ‡§ï‡§ø‡§∏‡§æ‡§®":
                st.markdown(f"**{role}:** {msg}")
            else:
                st.markdown(f"_{role}:_ {msg}")
