import streamlit as st
import requests
import random

st.set_page_config(page_title="Yugdaan - рдЦреЗрддреА рд╕рд▓рд╛рд╣", layout="centered")
st.title("ЁЯМ╛ Yugdaan - Bihar Smart Farming Assistant")
st.markdown("рдЖрдкрдХреЗ рдЬрд┐рд▓реЗ рдФрд░ рдЬрд╝рд░реВрд░рдд рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдлрд╝рд╕рд▓ рдХреА рд╕рд┐рдлрд╝рд╛рд░рд┐рд╢ (Crop recommendation based on your district and needs)")

# --- District Selection ---
districts = {
    "Darbhanga": "Darbhanga,IN",
    "Vaishali": "Hajipur,IN",
    "Aara": "Arrah,IN",
    "Chapra": "Chhapra,IN",
    "Balia": "Ballia,IN"
}

district = st.selectbox("ЁЯУН Select your district (рдЬрд┐рд▓рд╛ рдЪреБрдиреЗрдВ)", list(districts.keys()))
city_name = districts[district]

# --- Real-Time Weather API ---
api_key = "cce8745e8f0664cd77af8b135789fe54"
url = f"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={api_key}&units=metric"

try:
    response = requests.get(url)
    weather_data = response.json()

    if weather_data["cod"] == 200:
        temp = weather_data["main"]["temp"]
        humidity = weather_data["main"]["humidity"]
        weather = weather_data["weather"][0]["description"]
        rain = "rain" in weather.lower()

        st.markdown(f"ЁЯМд **Today's Weather (рдЖрдЬ рдХрд╛ рдореМрд╕рдо):**")
        st.markdown(f"- Temperature (рддрд╛рдкрдорд╛рди): {temp}┬░C")
        st.markdown(f"- Humidity (рдирдореА): {humidity}%")
        st.markdown(f"- Condition: {weather.capitalize()} ({'рдмрд╛рд░рд┐рд╢' if rain else 'рдХреЛрдИ рдмрд╛рд░рд┐рд╢ рдирд╣реАрдВ'})")
    else:
        st.error("тЪая╕П Weather data not available for your district right now.")
except:
    st.error("тЭМ Could not fetch live weather. Please check internet connection.")

# --- User Goal ---
goal = st.selectbox("ЁЯОп What do you want from your crop? (рдЖрдкрдХреА рдкреНрд░рд╛рдердорд┐рдХрддрд╛)", [
    "High Profit (рдЬреНрдпрд╛рджрд╛ рдХрдорд╛рдИ)",
    "Less Water Need (рдХрдо рдкрд╛рдиреА рд╡рд╛рд▓реА рдлрд╝рд╕рд▓)",
    "Quick Harvest (рддреЗрдЬрд╝реА рд╕реЗ рддреИрдпрд╛рд░ рд╣реЛрдиреЗ рд╡рд╛рд▓реА рдлрд╝рд╕рд▓)"
])

# --- Soil Moisture (Mock) ---
soil_moisture = random.choice(["Low", "Medium", "High"])
st.info(f"ЁЯТз Current Soil Moisture (рдорд┐рдЯреНрдЯреА рдореЗрдВ рдирдореА): **{soil_moisture}**")

# --- Smart Crop Recommendation Logic ---
crop_db = {
    "Darbhanga": [
        {"name": "Paddy (рдзрд╛рди)", "profit": "high", "water": "high", "speed": "medium"},
        {"name": "Maize (рдордХреНрдХрд╛)", "profit": "medium", "water": "medium", "speed": "fast"},
        {"name": "Banana (рдХреЗрд▓рд╛)", "profit": "high", "water": "high", "speed": "slow"},
        {"name": "Marigold (рдЧреЗрдВрджрд╛)", "profit": "medium", "water": "low", "speed": "fast"}
    ],
    "Vaishali": [
        {"name": "Wheat (рдЧреЗрд╣реВрдВ)", "profit": "medium", "water": "medium", "speed": "medium"},
        {"name": "Potato (рдЖрд▓реВ)", "profit": "high", "water": "medium", "speed": "fast"},
        {"name": "Litchi (рд▓реАрдЪреА)", "profit": "high", "water": "high", "speed": "slow"},
        {"name": "Mustard (рд╕рд░рд╕реЛрдВ)", "profit": "medium", "water": "low", "speed": "fast"}
    ],
    "Aara": [
        {"name": "Sugarcane (рдЧрдиреНрдирд╛)", "profit": "high", "water": "high", "speed": "slow"},
        {"name": "Brinjal (рдмреИрдВрдЧрди)", "profit": "medium", "water": "medium", "speed": "fast"},
        {"name": "Cauliflower (рдлреВрд▓рдЧреЛрднреА)", "profit": "medium", "water": "low", "speed": "fast"}
    ],
    "Chapra": [
        {"name": "Paddy (рдзрд╛рди)", "profit": "high", "water": "high", "speed": "medium"},
        {"name": "Tomato (рдЯрдорд╛рдЯрд░)", "profit": "medium", "water": "medium", "speed": "fast"},
        {"name": "Garlic (рд▓рд╣рд╕реБрди)", "profit": "medium", "water": "low", "speed": "medium"}
    ],
    "Balia": [
        {"name": "Wheat (рдЧреЗрд╣реВрдВ)", "profit": "medium", "water": "medium", "speed": "medium"},
        {"name": "Onion (рдкреНрдпрд╛рдЬ)", "profit": "high", "water": "medium", "speed": "fast"},
        {"name": "Pumpkin (рдХрджреНрджреВ)", "profit": "medium", "water": "low", "speed": "fast"}
    ]
}

# --- Apply filter based on user goal ---
filter_key = {
    "High Profit (рдЬреНрдпрд╛рджрд╛ рдХрдорд╛рдИ)": "profit",
    "Less Water Need (рдХрдо рдкрд╛рдиреА рд╡рд╛рд▓реА рдлрд╝рд╕рд▓)": "water",
    "Quick Harvest (рддреЗрдЬрд╝реА рд╕реЗ рддреИрдпрд╛рд░ рд╣реЛрдиреЗ рд╡рд╛рд▓реА рдлрд╝рд╕рд▓)": "speed"
}[goal]

desired_value = {
    "profit": "high",
    "water": "low",
    "speed": "fast"
}[filter_key]

matching_crops = [crop["name"] for crop in crop_db[district] if crop[filter_key] == desired_value]

# --- Output Recommendations ---
st.subheader("ЁЯМ▒ Recommended Crops (рдЕрдиреБрд╢рдВрд╕рд┐рдд рдлрд╝рд╕рд▓реЗрдВ):")
if matching_crops:
    for crop in matching_crops[:3]:
        st.markdown(f"- тЬЕ {crop}")
else:
    st.warning("тЪая╕П рдХреЛрдИ рдЙрдкрдпреБрдХреНрдд рдлрд╝рд╕рд▓ рдирд╣реАрдВ рдорд┐рд▓реАред рдХреГрдкрдпрд╛ рдЕрд▓рдЧ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рдЪреБрдиреЗрдВред (No ideal crop found for this goal.)")

# --- Soil Moisture Suggestion ---
if soil_moisture == "Low":
    st.warning("ЁЯТз рдорд┐рдЯреНрдЯреА рдореЗрдВ рдирдореА рдХрдо рд╣реИ, рд╕реБрдмрд╣ рд╕рд┐рдВрдЪрд╛рдИ рдХрд░реЗрдВ (Low soil moist
