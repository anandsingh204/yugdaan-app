import streamlit as st
import json
import requests
from datetime import datetime
import pytz
import difflib
import openai

# ----------------- Load Static Data --------------------
with open("crop_recommendations.json", "r", encoding="utf-8") as f:
    crop_data = json.load(f)

# ----------------- Config --------------------
API_KEY = "AIzaSyCsfJgoE10pmFhxAKLN4EXRX4ESmbTpB7A"
WEATHER_API_KEY = "cce8745e8f0664cd77af8b135789fe54"
OPENAI_API_KEY = "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"
openai.api_key = OPENAI_API_KEY

roman_to_hindi = {
    "mooli": "рдореВрд▓реА",
    "dhaniya": "рдзрдирд┐рдпрд╛",
    "baigan": "рдмреИрдЧрди",
    "aloo": "рдЖрд▓реВ",
    "pyaz": "рдкреНрдпрд╛рдЬ",
    "gobhi": "рдЧреЛрднреА",
    "genda": "рдЧреЗрдВрджрд╛",
    "tomato": "рдЯрдорд╛рдЯрд░",
    "tamatar": "рдЯрдорд╛рдЯрд░"
}

# ----------------- Helper Functions --------------------
def get_location_details_from_google(pincode):
    geocode_url = f"https://maps.googleapis.com/maps/api/geocode/json?address={pincode}&key={API_KEY}"
    response = requests.get(geocode_url).json()
    if response["status"] == "OK":
        components = response["results"][0]["address_components"]
        district, village = None, None
        for comp in components:
            if "administrative_area_level_2" in comp["types"]:
                district = comp["long_name"]
            if "sublocality_level_1" in comp["types"] or "locality" in comp["types"]:
                village = comp["long_name"]
        return village or "Unknown", district or "Unknown"
    return "тЭМ Not Found", "тЭМ Not Found"

def get_satellite_image(pincode):
    geocode_url = f"https://maps.googleapis.com/maps/api/geocode/json?address={pincode}&key={API_KEY}"
    geocode_response = requests.get(geocode_url).json()
    if geocode_response["status"] == "OK":
        location = geocode_response["results"][0]["geometry"]["location"]
        lat, lng = location["lat"], location["lng"]
        static_map_url = f"https://maps.googleapis.com/maps/api/staticmap?center={lat},{lng}&zoom=13&size=600x300&maptype=satellite&key={API_KEY}"
        return static_map_url, geocode_response["results"][0]["formatted_address"]
    return None, None

def get_weather_alert(pincode):
    try:
        url = f"https://api.weatherapi.com/v1/forecast.json?key={WEATHER_API_KEY}&q={pincode}&days=2&aqi=no&alerts=no"
        data = requests.get(url).json()
        rain = any(day["day"]["daily_chance_of_rain"] > 40 for day in data["forecast"]["forecastday"])
        if not rain:
            return "тЪая╕П рдмрд╛рд░рд┐рд╢ рдирд╣реАрдВ рд╣реЛрдиреЗ рд╡рд╛рд▓реА рд╣реИ, рдФрд░ рдорд┐рдЯреНрдЯреА рдореЗрдВ рдирдореА рдХрдо рд╣реИред рд╕реБрдмрд╣ рд╕рд┐рдВрдЪрд╛рдИ рдХрд░реЗрдВред (Low soil moisture тАУ irrigate in the morning)"
        return "тЬЕ рдмрд╛рд░рд┐рд╢ рд╣реЛрдиреЗ рдХреА рд╕рдВрднрд╛рд╡рдирд╛ рд╣реИ, рд╕рд┐рдВрдЪрд╛рдИ рд░реЛрдХреА рдЬрд╛ рд╕рдХрддреА рд╣реИред"
    except:
        return "тЪая╕П рдореМрд╕рдо рдЬрд╛рдирдХрд╛рд░реА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред"

def get_crop_advice(query, crops):
    query = query.lower().replace("?", "").replace("kyon", "").replace("kyun", "").strip()
    if query in roman_to_hindi:
        query = roman_to_hindi[query]

    all_crop_names = [crop["name"] for cat in crops.values() for crop in cat]
    closest_match = difflib.get_close_matches(query, all_crop_names, n=1, cutoff=0.6)
    if closest_match:
        for cat in crops.values():
            for crop in cat:
                if crop["name"] == closest_match[0]:
                    return f"ЁЯМ▒ **{crop['name']}** рдЗрд╕рд▓рд┐рдП рд╕реБрдЭрд╛рдпрд╛ рдЧрдпрд╛ рд╣реИ:", f"ЁЯФО рдХрд╛рд░рдг: {crop['why']}\n\nЁЯТ░ рд▓рд╛рдЧрдд: тВ╣{crop['cost_per_acre']} рдкреНрд░рддрд┐ рдПрдХрдбрд╝\nЁЯУИ рдЕрдиреБрдорд╛рдирд┐рдд рдореБрдирд╛рдлрд╝рд╛: {crop['expected_profit']} рдкреНрд░рддрд┐ рдПрдХрдбрд╝"

    # If not matched, ask GPT
    gpt_prompt = f"Why should a farmer in Bihar grow '{query}'? Explain in simple Hindi with cost and profit approximation if known."
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "user", "content": gpt_prompt}
        ]
    )
    return f"ЁЯМ╛ {query} рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдХрд╛рд░реА:", response["choices"][0]["message"]["content"]

# ----------------- App Config --------------------
st.set_page_config(page_title="Yugdaan", layout="centered")
st.title("ЁЯМ╛ Yugdaan тАУ Smart Farming Guide")

# ----------------- Input Section --------------------
st.markdown("### ЁЯУН рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд╡рд┐рд╡рд░рдг рднрд░реЗрдВ")

pincode = st.text_input("рдкрд┐рдирдХреЛрдб рджрд░реНрдЬ рдХрд░реЗрдВ (Enter Pincode)")
land_size = st.selectbox("рдХрд┐рддрдиреА рдЬрд╝рдореАрди рдореЗрдВ рдЦреЗрддреА рдХрд░рдирд╛ рд╣реИ? (Land Size)", ["<1 acre", "1тАУ2 acre", "2тАУ5 acre", "5+ acre"])
budget = st.selectbox("рдЖрдкрдХрд╛ рдмрдЬрдЯ рдХрд┐рддрдирд╛ рд╣реИ? (Budget)", ["<тВ╣10,000", "тВ╣10,000тАУ30,000", "тВ╣30,000тАУ50,000", "тВ╣50,000+"])

if pincode:
    village, district = get_location_details_from_google(pincode)
    if district == "тЭМ Not Found":
        st.warning("тЪая╕П рдпрд╣ рдкрд┐рдирдХреЛрдб рд╣рдорд╛рд░реЗ рд╕рд┐рд╕реНрдЯрдо рдореЗрдВ рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдЬрд╛рдВрдЪреЗрдВред")
    else:
        st.success(f"ЁЯУН рдЬрд┐рд▓рд╛: {district}, рдЧрд╛рдБрд╡: {village}")
        img_url, address = get_satellite_image(pincode)
        if img_url:
            st.image(img_url, caption=f"ЁЯМН {address}", use_column_width=True)

        # Weather Section
        st.markdown("### ЁЯМдя╕П рдореМрд╕рдо рд╕рд▓рд╛рд╣ (Weather Advice)")
        st.info(get_weather_alert(pincode))

        # Crop Recommendation
        st.markdown("## ЁЯМ▒ рдЖрдкрдХреЗ рд▓рд┐рдП рдлрд╕рд▓ рд╕реБрдЭрд╛рд╡")
        for category, crops in crop_data.items():
            st.markdown(f"### ЁЯФ╣ {category.replace('_', ' ').title()} Crops")
            for crop in crops:
                st.success(f"**{crop['name']}** ({crop['type']})")
                st.markdown(f"ЁЯТ░ **рд▓рд╛рдЧрдд (Cost/acre)**: тВ╣{crop['cost_per_acre']}  \n"
                            f"ЁЯУИ **рдореБрдирд╛рдлрд╝рд╛ (Profit/acre)**: {crop['expected_profit']}  \n"
                            f"ЁЯУЭ **рдХреНрдпреЛрдВ рдЙрдЧрд╛рдПрдВ? (Why)**: {crop['why']}")
                st.markdown("---")

        # Conversational Q&A
        st.markdown("### тЭУ рдХреЛрдИ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ рдлрд╕рд▓ рдкрд░ (Ask about a crop)")
        user_crop_query = st.text_input("рдЬреИрд╕реЗ рдкреВрдЫреЗрдВ: рдореВрд▓реА рдХреНрдпреЛрдВ? / dhaniya kyon?")
        if user_crop_query:
            title, response = get_crop_advice(user_crop_query, crop_data)
            st.markdown(f"#### {title}")
            st.info(response)
